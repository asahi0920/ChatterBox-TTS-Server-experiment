@startuml
actor User
participant "index.html\nGenerate Speechボタン" as Button
participant "script.js\nクリックイベント" as ClickHandler
participant "script.js\nsubmitTTSRequest()" as submitTTSRequest
participant "script.js\ngetTTSFormData()" as getTTSFormData
participant "server.py\n/ttsエンドポイント" as TTSEndpoint
participant "server.py\ncustom_tts_endpoint()" as CustomTTSEndpoint
participant "engine.py\nengine.synthesize()" as Engine
participant "chatterbox.tts\nChatterboxTTS" as ChatterboxTTS
participant "script.js\ninitializeWaveSurfer()" as initializeWaveSurfer

== ユーザー操作 ==
User -> Button : 「Generate Speech」ボタンを押す
Button -> ClickHandler : クリックイベント発生

== TTSリクエスト準備 ==
ClickHandler -> submitTTSRequest : submitTTSRequest()呼び出し

activate submitTTSRequest
submitTTSRequest -> submitTTSRequest : isGenerating = true\n(多重リクエスト防止)
submitTTSRequest -> submitTTSRequest : showLoadingOverlay()\n(ローディング表示)
submitTTSRequest -> submitTTSRequest : startTime = performance.now()\n(計測開始)
submitTTSRequest -> getTTSFormData : getTTSFormData()でフォーム値を集める

activate getTTSFormData
getTTSFormData -> getTTSFormData : text = textArea.value
getTTSFormData -> getTTSFormData : temperature = parseFloat(temperatureSlider.value)
getTTSFormData -> getTTSFormData : exaggeration = parseFloat(exaggerationSlider.value)
getTTSFormData -> getTTSFormData : cfg_weight = parseFloat(cfgWeightSlider.value)
getTTSFormData -> getTTSFormData : speed_factor = parseFloat(speedFactorSlider.value)
getTTSFormData -> getTTSFormData : seed = parseInt(seedInput.value, 10)
getTTSFormData -> getTTSFormData : language = languageSelect.value
getTTSFormData -> getTTSFormData : voice_mode = currentVoiceMode
getTTSFormData -> getTTSFormData : split_text = splitTextToggle.checked
getTTSFormData -> getTTSFormData : chunk_size = parseInt(chunkSizeSlider.value, 10)
getTTSFormData -> getTTSFormData : output_format = outputFormatSelect.value
alt 声モードがpredefined
    getTTSFormData -> getTTSFormData : predefined_voice_id = predefinedVoiceSelect.value
else 声モードがclone
    getTTSFormData -> getTTSFormData : reference_audio_filename = cloneReferenceSelect.value
end
getTTSFormData --> submitTTSRequest : jsonData（パラメータまとめたオブジェクト）
deactivate getTTSFormData

submitTTSRequest -> submitTTSRequest : JSON.stringify(jsonData)
submitTTSRequest -> TTSEndpoint : fetch('http://localhost:8004/tts', {POST, headers, body: jsonData})

== FastAPIサーバー側処理 ==
activate TTSEndpoint
TTSEndpoint -> CustomTTSEndpoint : async def custom_tts_endpoint()呼び出し

activate CustomTTSEndpoint
CustomTTSEndpoint -> CustomTTSEndpoint : リクエストパラメータ検証
CustomTTSEndpoint -> CustomTTSEndpoint : TTSRequestモデルでバリデーション
CustomTTSEndpoint -> Engine : engine.synthesize()呼び出し

activate Engine
Engine -> Engine : パラメータ前処理・設定
Engine -> ChatterboxTTS : ChatterboxTTSインスタンス生成/取得
activate ChatterboxTTS

alt split_text = true
    Engine -> Engine : テキストをチャンクに分割
    loop 各チャンクに対して
        Engine -> ChatterboxTTS : 音声合成実行（モデル推論）
        ChatterboxTTS -> ChatterboxTTS : 深層学習モデルでの音声生成
        ChatterboxTTS --> Engine : 生成された音声セグメント
    end
    Engine -> Engine : 音声セグメントを結合
else split_text = false
    Engine -> ChatterboxTTS : 全テキストで音声合成実行
    ChatterboxTTS -> ChatterboxTTS : 深層学習モデルでの音声生成
    ChatterboxTTS --> Engine : 生成された音声データ
end

deactivate ChatterboxTTS
Engine -> Engine : 出力フォーマット変換・後処理
Engine -> Engine : 一時ファイル保存
Engine --> CustomTTSEndpoint : 音声ファイルパス・メタデータ
deactivate Engine

CustomTTSEndpoint -> CustomTTSEndpoint : ファイル読み込み・レスポンス準備
CustomTTSEndpoint -> CustomTTSEndpoint : Content-Dispositionヘッダー生成
CustomTTSEndpoint --> TTSEndpoint : StreamingResponse(音声データ, headers)
deactivate CustomTTSEndpoint

TTSEndpoint --> submitTTSRequest : 音声データ(blob)・Content-Dispositionヘッダー
deactivate TTSEndpoint

== クライアント側での処理 ==
submitTTSRequest -> submitTTSRequest : endTime = performance.now()
submitTTSRequest -> submitTTSRequest : genTime = (endTime - startTime) / 1000
submitTTSRequest -> submitTTSRequest : filenameFromServer = response.headers.get('Content-Disposition')
submitTTSRequest -> submitTTSRequest : resultDetails = { outputUrl, filename, genTime, ... }
submitTTSRequest -> initializeWaveSurfer : initializeWaveSurfer(outputUrl, resultDetails)
initializeWaveSurfer -> User : 音声再生UI表示

submitTTSRequest -> submitTTSRequest : showNotification('Audio generated successfully!')
submitTTSRequest -> submitTTSRequest : isGenerating = false
submitTTSRequest -> submitTTSRequest : hideLoadingOverlay()
deactivate submitTTSRequest

== エラーハンドリング ==
alt エラー発生時
    submitTTSRequest -> submitTTSRequest : showNotification('Error occurred')
    submitTTSRequest -> submitTTSRequest : isGenerating = false
    submitTTSRequest -> submitTTSRequest : hideLoadingOverlay()
end

@enduml